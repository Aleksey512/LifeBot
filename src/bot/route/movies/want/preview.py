from typing import Optional, cast

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config.consts import IMG_DIR
from db.models import MovieModel
from db.repository.movies import MoviesRepository
from db.session import get_session

router = Router()
PAGE_LIMIT = 1


def build_movie_msg(movie: MovieModel) -> str:
    return (
        f"üé¨ <b>{movie.title}</b>\n"
        f"üìÖ <i>{movie.year}</i>\n"
        f"üîñ –°—Ç–∞—Ç—É—Å: <b>{movie.status}</b>\n"
        f"üìù {movie.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}"
    )


def build_movie_kb(
    movie_id: Optional[int], skip: int, has_next: bool
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    current_page = (skip // PAGE_LIMIT) + 1

    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
    if skip > 0:
        builder.add(
            InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"movies:want:{max(skip - PAGE_LIMIT, 0)}",
            )
        )
    else:
        builder.add(InlineKeyboardButton(text="...", callback_data="..."))

    builder.add(InlineKeyboardButton(text=f"{current_page}", callback_data="..."))

    # –ö–Ω–æ–ø–∫–∞ "–≤–ø–µ—Ä—ë–¥"
    if has_next:
        builder.add(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"movies:want:{skip + PAGE_LIMIT}",
            )
        )
    else:
        builder.add(InlineKeyboardButton(text="...", callback_data="..."))

    builder.row(
        InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å", callback_data="movies:want:add")
    )
    if movie_id:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ", callback_data=f"movies:want:watched:{movie_id}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"movies:want:remove:{movie_id}"
            )
        )
    builder.row(InlineKeyboardButton(text="<- –ù–∞–∑–∞–¥", callback_data="movies"))

    return builder.as_markup()


@router.callback_query(F.data.regexp(r"^movies:want:\d+$"))
async def handle_wanted(clbq: CallbackQuery) -> None:
    skip = int(cast(str, clbq.data).split(":")[-1])
    async with get_session() as session:
        mv = MoviesRepository(session)
        movies, has_next = await mv.get_by_is_watched(False, skip, PAGE_LIMIT)

    if len(movies) != 1:
        await cast(Message, clbq.message).edit_media(
            InputMediaPhoto(
                media=FSInputFile(IMG_DIR / "movieImg.jpg"),
                caption="–ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ —Å–ø–∏—Å–∫–µ üì≠",
                parse_mode="HTML",
            ),
            reply_markup=build_movie_kb(None, skip, False),
        )
        return

    movie: MovieModel = movies[-1]

    poster = movie.poster if movie.poster else FSInputFile(IMG_DIR / "movieImg.jpg")
    await cast(Message, clbq.message).edit_media(
        InputMediaPhoto(
            media=poster,
            caption=build_movie_msg(movie),
            parse_mode="HTML",
        ),
        reply_markup=build_movie_kb(movie.id, skip, has_next),
    )
